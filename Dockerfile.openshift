# ---------------------------
# Build Stage
# ---------------------------
FROM node:18-alpine AS build

# Set working directory
WORKDIR /opt/app-root/src

# Copy the entire application source code
COPY . .

# Switch to root to fix file permissions
USER root

# Ensure correct ownership of all files for any OpenShift assigned UID
RUN chown -R 1001:0 /opt/app-root/src && chmod -R g+rwX /opt/app-root/src

# Set npm cache to a writable directory inside the user's home
ENV NPM_CONFIG_CACHE=/opt/app-root/src/.npm

# Ensure the new cache directory exists and is writable by any non-root user
RUN mkdir -p $NPM_CONFIG_CACHE && chmod -R g+rwX $NPM_CONFIG_CACHE

# Allow group write permissions so OpenShift's random UID can write
RUN chmod -R g+rwX /opt/app-root/src/.npm

# Switch back to a non-root user (OpenShift will override this with a random UID)
USER 1001

# Install backend dependencies + build the frontend
RUN npm install
RUN cd client && npm install && npm run build

# ---------------------------
# Runtime Stage
# ---------------------------
FROM node:18-alpine

WORKDIR /opt/app-root/src

# Copy ONLY the needed runtime files + the built frontend
COPY --from=build /opt/app-root/src/client/dist ./client/dist
COPY --from=build /opt/app-root/src/*.js ./
COPY --from=build /opt/app-root/src/package*.json ./
COPY --from=build /opt/app-root/src/fonts ./fonts

# (Optional) Fix file permissions again, useful for OpenShift UID
USER root
RUN mkdir -p $NPM_CONFIG_CACHE && chmod -R g+rwX $NPM_CONFIG_CACHE \
    && chown -R 1001:0 /opt/app-root/src && chmod -R g+rwX /opt/app-root/src

# Switch back to non-root
USER 1001

# Install only production dependencies
RUN npm install

# Expose the application port
EXPOSE 8080

# Set the default command to run the app
CMD ["npm", "start"]
